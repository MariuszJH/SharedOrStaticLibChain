#[==================================================[
SharedOrStaticLib3

If BUILD_SHARED_LIBS is ON, SHARED library will be built
If BUILD_SHARED_LIBS is Off, STATIC library will be built
#]==================================================]
if(BUILD_SHARED_LIBS)
    set(isThereDllToLinkToDriver ON CACHE BOOL "overwrite default or previous option" FORCE)
    set(sharedOrStaticType shared)
    message(STATUS "BUILD_SHARED_LIBS: " ${BUILD_SHARED_LIBS} " --- targetSharedOrStaticLib3 will be built as SHARED library")
else()
    set(isThereDllToLinkToDriver OFF CACHE BOOL "overwrite default or previous option" FORCE)
    set(sharedOrStaticType static)
    message(STATUS "BUILD_SHARED_LIBS: " ${BUILD_SHARED_LIBS} " --- targetSharedOrStaticLib3 will be built as STATIC library")
endif()

message("#3 isThereDllToLinkToDriver: " ${isThereDllToLinkToDriver})

add_library(targetSharedOrStaticLib3)

set(CMAKE_POSITION_INDEPENDENT_CODE ON)

target_include_directories(targetSharedOrStaticLib3
    PRIVATE
        hdr
    PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
)

#[=========================[
N.B. 
Public headers are:
-- header files which need to be explicitly included by another application/library
-- header files which are included in the aforementioned header files.
Private header are:
-- header files which are only included in source (*.cpp, *.c) files but not in any of the public header files
-- header files included in other private header files
]=========================]

target_sources(targetSharedOrStaticLib3
    PRIVATE
        hdr/SharedOrStaticLib3.hpp
        src/SharedOrStaticLib3.cpp
        src/SharedOrStaticLib3Api.cpp
    PUBLIC 
        FILE_SET HEADERS 
        BASE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/include
        # BASE_DIRS ${CMAKE_SOURCE_DIR}/Code/SharedOrStaticLib3/include
        FILES 
            # ${CMAKE_SOURCE_DIR}/Code/SharedOrStaticLib3/include/SharedOrStaticLib3Api.hpp
            ${CMAKE_CURRENT_SOURCE_DIR}/include/SharedOrStaticLib3Api.hpp
)

set_target_properties(targetSharedOrStaticLib3
    PROPERTIES
        OUTPUT_NAME                         SharedOrStaticLib3_${sharedOrStaticType}
        EXPORT_NAME                         SharedOrStaticLib3
        DEBUG_POSTFIX                       "_d"
        RUNTIME_OUTPUT_DIRECTORY            ${CMAKE_BINARY_DIR}/buildOut/SharedOrStaticLib3/bin/$<CONFIG>
        PDB_OUTPUT_DIRECTORY                ${CMAKE_BINARY_DIR}/buildOut/SharedOrStaticLib3/pdb/$<CONFIG>
        LIBRARY_OUTPUT_DIRECTORY            ${CMAKE_BINARY_DIR}/buildOut/SharedOrStaticLib3/lib/$<CONFIG>
        ARCHIVE_OUTPUT_DIRECTORY            ${CMAKE_BINARY_DIR}/buildOut/SharedOrStaticLib3/lib/$<CONFIG>
        RUNTIME_OUTPUT_DIRECTORY_<Config>   ${RUNTIME_OUTPUT_DIRECTORY}
        PDB_OUTPUT_DIRECTORY_<Config>       ${PDB_OUTPUT_DIRECTORY}
        LIBRARY_OUTPUT_DIRECTORY_<Config>   ${LIBRARY_OUTPUT_DIRECTORY}
        ARCHIVE_OUTPUT_DIRECTORY_<Config>   ${ARCHIVE_OUTPUT_DIRECTORY}
)

target_compile_features(targetSharedOrStaticLib3
    PUBLIC
        cxx_std_20
)

if(MSVC)

    target_compile_options(targetSharedOrStaticLib3 
        PRIVATE
            /EHsc
            /W2
            # /Wall
    )

else()

    target_compile_options(targetSharedOrStaticLib3 
        PRIVATE
            -Wall
            # -Wextra
            # -Wpedantic
    )

endif()

#[==================================================[
Let cmake generate proper __declspec(dllexport) and __declspec(dllexport) needed by Windows
#]==================================================]
include(GenerateExportHeader)
generate_export_header(targetSharedOrStaticLib3
    # EXPORT_FILE_NAME ${CMAKE_SOURCE_DIR}/Code/SharedOrStaticLib3/include/AutoGeneratedSharedOrStaticLib3Exports.hpp
    EXPORT_FILE_NAME ${CMAKE_CURRENT_SOURCE_DIR}/include/AutoGeneratedSharedOrStaticLib3Exports.hpp
    EXPORT_MACRO_NAME SHARED_OR_STATIC_LIB3_API
    INCLUDE_GUARD_NAME AUTO_GENERATED_SHARED_OR_STATIC_LIB3_EXPORTS_HPP
)

# target_compile_definitions(targetSharedOrStaticLib3 
#     PRIVATE 
#         $<$<NOT:$<BOOL:${BUILD_SHARED_LIBS}>>:targetSharedOrStaticLib3_EXPORTS>
#         # $<$<NOT:$<BOOL:${BUILD_SHARED_LIBS}>>:targetSharedOrStaticLib3_STATIC_DEFINE>
# )
