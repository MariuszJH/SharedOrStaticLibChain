#[==================================================[
SharedOrStaticLib2

If BUILD_SHARED_LIBS is ON, SHARED library will be built
If BUILD_SHARED_LIBS is Off, STATIC library will be built
#]==================================================]
if(BUILD_SHARED_LIBS)
    set(isThereDllToLinkToDriver ON CACHE BOOL "overwrite default or previous option" FORCE)
    set(sharedOrStaticType shared)
    message(STATUS "BUILD_SHARED_LIBS: " ${BUILD_SHARED_LIBS} " --- targetSharedOrStaticLib2 will be built as SHARED library")
else()
    set(isThereDllToLinkToDriver OFF CACHE BOOL "overwrite default or previous option" FORCE)
    set(sharedOrStaticType static)
    message(STATUS "BUILD_SHARED_LIBS: " ${BUILD_SHARED_LIBS} " --- targetSharedOrStaticLib2 will be built as STATIC library")
endif()

message("#2 isThereDllToLinkToDriver: " ${isThereDllToLinkToDriver})

add_library(targetSharedOrStaticLib2)

set(CMAKE_POSITION_INDEPENDENT_CODE ON)

target_include_directories(targetSharedOrStaticLib2
    PRIVATE
        hdr
    PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
)

#[=========================[
N.B. 
Public headers are:
-- header files which need to be explicitly included by another application/library
-- header files which are included in the aforementioned header files.
Private header are:
-- header files which are only included in source (*.cpp, *.c) files but not in any of the public header files
-- header files included in other private header files
]=========================]

target_sources(targetSharedOrStaticLib2
    PRIVATE
        hdr/SharedOrStaticLib2.hpp
        src/SharedOrStaticLib2.cpp
        src/SharedOrStaticLib2Api.cpp
    PUBLIC 
        FILE_SET HEADERS 
        BASE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/include
        # BASE_DIRS ${CMAKE_SOURCE_DIR}/Code/SharedOrStaticLib2/include
        FILES 
            ${CMAKE_CURRENT_SOURCE_DIR}/include/SharedOrStaticLib2Api.hpp
            # ${CMAKE_SOURCE_DIR}/Code/SharedOrStaticLib2/include/SharedOrStaticLib2Api.hpp
)

set_target_properties(targetSharedOrStaticLib2
    PROPERTIES
        OUTPUT_NAME                         SharedOrStaticLib2_${sharedOrStaticType}
        EXPORT_NAME                         SharedOrStaticLib2
        DEBUG_POSTFIX                       "_d"
        RUNTIME_OUTPUT_DIRECTORY            ${CMAKE_BINARY_DIR}/buildOut/SharedOrStaticLib2/bin/$<CONFIG>
        PDB_OUTPUT_DIRECTORY                ${CMAKE_BINARY_DIR}/buildOut/SharedOrStaticLib2/pdb/$<CONFIG>
        LIBRARY_OUTPUT_DIRECTORY            ${CMAKE_BINARY_DIR}/buildOut/SharedOrStaticLib2/lib/$<CONFIG>
        ARCHIVE_OUTPUT_DIRECTORY            ${CMAKE_BINARY_DIR}/buildOut/SharedOrStaticLib2/lib/$<CONFIG>
        RUNTIME_OUTPUT_DIRECTORY_<Config>   ${RUNTIME_OUTPUT_DIRECTORY}
        PDB_OUTPUT_DIRECTORY_<Config>       ${PDB_OUTPUT_DIRECTORY}
        LIBRARY_OUTPUT_DIRECTORY_<Config>   ${LIBRARY_OUTPUT_DIRECTORY}
        ARCHIVE_OUTPUT_DIRECTORY_<Config>   ${ARCHIVE_OUTPUT_DIRECTORY}
)

target_compile_features(targetSharedOrStaticLib2
    PUBLIC
        cxx_std_20
)

if(MSVC)

    target_compile_options(targetSharedOrStaticLib2 
        PRIVATE
            /EHsc
            /W2
            # /Wall
    )

else()

    target_compile_options(targetSharedOrStaticLib2 
        PRIVATE
            -Wall
            # -Wextra
            # -Wpedantic
    )

endif()

#[==================================================[
Let cmake generate proper __declspec(dllexport) and __declspec(dllexport) needed by Windows
#]==================================================]
include(GenerateExportHeader)
generate_export_header(targetSharedOrStaticLib2
    # EXPORT_FILE_NAME ${CMAKE_CURRENT_SOURCE_DIR}/include/AutoGeneratedSharedOrStaticLib2Exports.hpp
    # EXPORT_FILE_NAME ${CMAKE_SOURCE_DIR}/Code/SharedOrStaticLib2/include/AutoGeneratedSharedOrStaticLib2Exports.hpp
    EXPORT_FILE_NAME ${CMAKE_CURRENT_SOURCE_DIR}/include/AutoGeneratedSharedOrStaticLib2Exports.hpp
    EXPORT_MACRO_NAME SHARED_OR_STATIC_LIB2_API
    INCLUDE_GUARD_NAME AUTO_GENERATED_SHARED_OR_STATIC_LIB2_EXPORTS_HPP
)

# target_compile_definitions(targetSharedOrStaticLib2 
#     PRIVATE 
#         $<$<NOT:$<BOOL:${BUILD_SHARED_LIBS}>>:targetSharedOrStaticLib2_EXPORTS>
#         # $<$<NOT:$<BOOL:${BUILD_SHARED_LIBS}>>:targetSharedOrStaticLib2_STATIC_DEFINE>
# )

#[==================================================[
Link executable with libraries
#]==================================================]
target_link_libraries(targetSharedOrStaticLib2
    PRIVATE 
        targetSharedOrStaticLib3
)
